// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
	mock "github.com/stretchr/testify/mock"
)

// SQSClientInterface is an autogenerated mock type for the SQSClientInterface type
type SQSClientInterface struct {
	mock.Mock
}

type SQSClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SQSClientInterface) EXPECT() *SQSClientInterface_Expecter {
	return &SQSClientInterface_Expecter{mock: &_m.Mock}
}

// GetQueueUrl provides a mock function with given fields: _a0
func (_m *SQSClientInterface) GetQueueUrl(_a0 context.Context) *string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueUrl")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context) *string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// SQSClientInterface_GetQueueUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueUrl'
type SQSClientInterface_GetQueueUrl_Call struct {
	*mock.Call
}

// GetQueueUrl is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SQSClientInterface_Expecter) GetQueueUrl(_a0 interface{}) *SQSClientInterface_GetQueueUrl_Call {
	return &SQSClientInterface_GetQueueUrl_Call{Call: _e.mock.On("GetQueueUrl", _a0)}
}

func (_c *SQSClientInterface_GetQueueUrl_Call) Run(run func(_a0 context.Context)) *SQSClientInterface_GetQueueUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SQSClientInterface_GetQueueUrl_Call) Return(_a0 *string) *SQSClientInterface_GetQueueUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQSClientInterface_GetQueueUrl_Call) RunAndReturn(run func(context.Context) *string) *SQSClientInterface_GetQueueUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueues provides a mock function with given fields: ctx, prefix
func (_m *SQSClientInterface) GetQueues(ctx context.Context, prefix string) []string {
	ret := _m.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetQueues")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SQSClientInterface_GetQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueues'
type SQSClientInterface_GetQueues_Call struct {
	*mock.Call
}

// GetQueues is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *SQSClientInterface_Expecter) GetQueues(ctx interface{}, prefix interface{}) *SQSClientInterface_GetQueues_Call {
	return &SQSClientInterface_GetQueues_Call{Call: _e.mock.On("GetQueues", ctx, prefix)}
}

func (_c *SQSClientInterface_GetQueues_Call) Run(run func(ctx context.Context, prefix string)) *SQSClientInterface_GetQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SQSClientInterface_GetQueues_Call) Return(_a0 []string) *SQSClientInterface_GetQueues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQSClientInterface_GetQueues_Call) RunAndReturn(run func(context.Context, string) []string) *SQSClientInterface_GetQueues_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields: _a0
func (_m *SQSClientInterface) Poll(_a0 context.Context) {
	_m.Called(_a0)
}

// SQSClientInterface_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type SQSClientInterface_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SQSClientInterface_Expecter) Poll(_a0 interface{}) *SQSClientInterface_Poll_Call {
	return &SQSClientInterface_Poll_Call{Call: _e.mock.On("Poll", _a0)}
}

func (_c *SQSClientInterface_Poll_Call) Run(run func(_a0 context.Context)) *SQSClientInterface_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SQSClientInterface_Poll_Call) Return() *SQSClientInterface_Poll_Call {
	_c.Call.Return()
	return _c
}

func (_c *SQSClientInterface_Poll_Call) RunAndReturn(run func(context.Context)) *SQSClientInterface_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMessage provides a mock function with given fields: ctx, message, queueUrl
func (_m *SQSClientInterface) ProcessMessage(ctx context.Context, message types.Message, queueUrl string) {
	_m.Called(ctx, message, queueUrl)
}

// SQSClientInterface_ProcessMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMessage'
type SQSClientInterface_ProcessMessage_Call struct {
	*mock.Call
}

// ProcessMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.Message
//   - queueUrl string
func (_e *SQSClientInterface_Expecter) ProcessMessage(ctx interface{}, message interface{}, queueUrl interface{}) *SQSClientInterface_ProcessMessage_Call {
	return &SQSClientInterface_ProcessMessage_Call{Call: _e.mock.On("ProcessMessage", ctx, message, queueUrl)}
}

func (_c *SQSClientInterface_ProcessMessage_Call) Run(run func(ctx context.Context, message types.Message, queueUrl string)) *SQSClientInterface_ProcessMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Message), args[2].(string))
	})
	return _c
}

func (_c *SQSClientInterface_ProcessMessage_Call) Return() *SQSClientInterface_ProcessMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *SQSClientInterface_ProcessMessage_Call) RunAndReturn(run func(context.Context, types.Message, string)) *SQSClientInterface_ProcessMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveMessages provides a mock function with given fields: ctx, queueUrl, ch
func (_m *SQSClientInterface) ReceiveMessages(ctx context.Context, queueUrl string, ch chan types.Message) error {
	ret := _m.Called(ctx, queueUrl, ch)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, chan types.Message) error); ok {
		r0 = rf(ctx, queueUrl, ch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SQSClientInterface_ReceiveMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessages'
type SQSClientInterface_ReceiveMessages_Call struct {
	*mock.Call
}

// ReceiveMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - queueUrl string
//   - ch chan types.Message
func (_e *SQSClientInterface_Expecter) ReceiveMessages(ctx interface{}, queueUrl interface{}, ch interface{}) *SQSClientInterface_ReceiveMessages_Call {
	return &SQSClientInterface_ReceiveMessages_Call{Call: _e.mock.On("ReceiveMessages", ctx, queueUrl, ch)}
}

func (_c *SQSClientInterface_ReceiveMessages_Call) Run(run func(ctx context.Context, queueUrl string, ch chan types.Message)) *SQSClientInterface_ReceiveMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(chan types.Message))
	})
	return _c
}

func (_c *SQSClientInterface_ReceiveMessages_Call) Return(_a0 error) *SQSClientInterface_ReceiveMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQSClientInterface_ReceiveMessages_Call) RunAndReturn(run func(context.Context, string, chan types.Message) error) *SQSClientInterface_ReceiveMessages_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *SQSClientInterface) Start(_a0 context.Context) {
	_m.Called(_a0)
}

// SQSClientInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type SQSClientInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SQSClientInterface_Expecter) Start(_a0 interface{}) *SQSClientInterface_Start_Call {
	return &SQSClientInterface_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *SQSClientInterface_Start_Call) Run(run func(_a0 context.Context)) *SQSClientInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SQSClientInterface_Start_Call) Return() *SQSClientInterface_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *SQSClientInterface_Start_Call) RunAndReturn(run func(context.Context)) *SQSClientInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewSQSClientInterface creates a new instance of SQSClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQSClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQSClientInterface {
	mock := &SQSClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
