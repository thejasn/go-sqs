// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"
)

// SQSService is an autogenerated mock type for the SQSService type
type SQSService struct {
	mock.Mock
}

type SQSService_Expecter struct {
	mock *mock.Mock
}

func (_m *SQSService) EXPECT() *SQSService_Expecter {
	return &SQSService_Expecter{mock: &_m.Mock}
}

// ChangeMessageVisibility provides a mock function with given fields: ctx, input, opts
func (_m *SQSService) ChangeMessageVisibility(ctx context.Context, input *sqs.ChangeMessageVisibilityInput, opts ...func(*sqs.Options)) (*sqs.ChangeMessageVisibilityOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeMessageVisibility")
	}

	var r0 *sqs.ChangeMessageVisibilityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.ChangeMessageVisibilityInput, ...func(*sqs.Options)) (*sqs.ChangeMessageVisibilityOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.ChangeMessageVisibilityInput, ...func(*sqs.Options)) *sqs.ChangeMessageVisibilityOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ChangeMessageVisibilityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.ChangeMessageVisibilityInput, ...func(*sqs.Options)) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQSService_ChangeMessageVisibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeMessageVisibility'
type SQSService_ChangeMessageVisibility_Call struct {
	*mock.Call
}

// ChangeMessageVisibility is a helper method to define mock.On call
//   - ctx context.Context
//   - input *sqs.ChangeMessageVisibilityInput
//   - opts ...func(*sqs.Options)
func (_e *SQSService_Expecter) ChangeMessageVisibility(ctx interface{}, input interface{}, opts ...interface{}) *SQSService_ChangeMessageVisibility_Call {
	return &SQSService_ChangeMessageVisibility_Call{Call: _e.mock.On("ChangeMessageVisibility",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *SQSService_ChangeMessageVisibility_Call) Run(run func(ctx context.Context, input *sqs.ChangeMessageVisibilityInput, opts ...func(*sqs.Options))) *SQSService_ChangeMessageVisibility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sqs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sqs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sqs.ChangeMessageVisibilityInput), variadicArgs...)
	})
	return _c
}

func (_c *SQSService_ChangeMessageVisibility_Call) Return(_a0 *sqs.ChangeMessageVisibilityOutput, _a1 error) *SQSService_ChangeMessageVisibility_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQSService_ChangeMessageVisibility_Call) RunAndReturn(run func(context.Context, *sqs.ChangeMessageVisibilityInput, ...func(*sqs.Options)) (*sqs.ChangeMessageVisibilityOutput, error)) *SQSService_ChangeMessageVisibility_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessage provides a mock function with given fields: ctx, input, opts
func (_m *SQSService) DeleteMessage(ctx context.Context, input *sqs.DeleteMessageInput, opts ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 *sqs.DeleteMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.DeleteMessageInput, ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.DeleteMessageInput, ...func(*sqs.Options)) *sqs.DeleteMessageOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.DeleteMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.DeleteMessageInput, ...func(*sqs.Options)) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQSService_DeleteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessage'
type SQSService_DeleteMessage_Call struct {
	*mock.Call
}

// DeleteMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - input *sqs.DeleteMessageInput
//   - opts ...func(*sqs.Options)
func (_e *SQSService_Expecter) DeleteMessage(ctx interface{}, input interface{}, opts ...interface{}) *SQSService_DeleteMessage_Call {
	return &SQSService_DeleteMessage_Call{Call: _e.mock.On("DeleteMessage",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *SQSService_DeleteMessage_Call) Run(run func(ctx context.Context, input *sqs.DeleteMessageInput, opts ...func(*sqs.Options))) *SQSService_DeleteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sqs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sqs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sqs.DeleteMessageInput), variadicArgs...)
	})
	return _c
}

func (_c *SQSService_DeleteMessage_Call) Return(_a0 *sqs.DeleteMessageOutput, _a1 error) *SQSService_DeleteMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQSService_DeleteMessage_Call) RunAndReturn(run func(context.Context, *sqs.DeleteMessageInput, ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error)) *SQSService_DeleteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueUrl provides a mock function with given fields: ctx, input, opts
func (_m *SQSService) GetQueueUrl(ctx context.Context, input *sqs.GetQueueUrlInput, opts ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueUrl")
	}

	var r0 *sqs.GetQueueUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) *sqs.GetQueueUrlOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.GetQueueUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQSService_GetQueueUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueUrl'
type SQSService_GetQueueUrl_Call struct {
	*mock.Call
}

// GetQueueUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - input *sqs.GetQueueUrlInput
//   - opts ...func(*sqs.Options)
func (_e *SQSService_Expecter) GetQueueUrl(ctx interface{}, input interface{}, opts ...interface{}) *SQSService_GetQueueUrl_Call {
	return &SQSService_GetQueueUrl_Call{Call: _e.mock.On("GetQueueUrl",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *SQSService_GetQueueUrl_Call) Run(run func(ctx context.Context, input *sqs.GetQueueUrlInput, opts ...func(*sqs.Options))) *SQSService_GetQueueUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sqs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sqs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sqs.GetQueueUrlInput), variadicArgs...)
	})
	return _c
}

func (_c *SQSService_GetQueueUrl_Call) Return(_a0 *sqs.GetQueueUrlOutput, _a1 error) *SQSService_GetQueueUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQSService_GetQueueUrl_Call) RunAndReturn(run func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)) *SQSService_GetQueueUrl_Call {
	_c.Call.Return(run)
	return _c
}

// ListQueues provides a mock function with given fields: ctx, input, opts
func (_m *SQSService) ListQueues(ctx context.Context, input *sqs.ListQueuesInput, opts ...func(*sqs.Options)) (*sqs.ListQueuesOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *sqs.ListQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.ListQueuesInput, ...func(*sqs.Options)) (*sqs.ListQueuesOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.ListQueuesInput, ...func(*sqs.Options)) *sqs.ListQueuesOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ListQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.ListQueuesInput, ...func(*sqs.Options)) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQSService_ListQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQueues'
type SQSService_ListQueues_Call struct {
	*mock.Call
}

// ListQueues is a helper method to define mock.On call
//   - ctx context.Context
//   - input *sqs.ListQueuesInput
//   - opts ...func(*sqs.Options)
func (_e *SQSService_Expecter) ListQueues(ctx interface{}, input interface{}, opts ...interface{}) *SQSService_ListQueues_Call {
	return &SQSService_ListQueues_Call{Call: _e.mock.On("ListQueues",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *SQSService_ListQueues_Call) Run(run func(ctx context.Context, input *sqs.ListQueuesInput, opts ...func(*sqs.Options))) *SQSService_ListQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sqs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sqs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sqs.ListQueuesInput), variadicArgs...)
	})
	return _c
}

func (_c *SQSService_ListQueues_Call) Return(_a0 *sqs.ListQueuesOutput, _a1 error) *SQSService_ListQueues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQSService_ListQueues_Call) RunAndReturn(run func(context.Context, *sqs.ListQueuesInput, ...func(*sqs.Options)) (*sqs.ListQueuesOutput, error)) *SQSService_ListQueues_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveMessage provides a mock function with given fields: ctx, input, opts
func (_m *SQSService) ReceiveMessage(ctx context.Context, input *sqs.ReceiveMessageInput, opts ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessage")
	}

	var r0 *sqs.ReceiveMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.ReceiveMessageInput, ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.ReceiveMessageInput, ...func(*sqs.Options)) *sqs.ReceiveMessageOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ReceiveMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.ReceiveMessageInput, ...func(*sqs.Options)) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQSService_ReceiveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessage'
type SQSService_ReceiveMessage_Call struct {
	*mock.Call
}

// ReceiveMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - input *sqs.ReceiveMessageInput
//   - opts ...func(*sqs.Options)
func (_e *SQSService_Expecter) ReceiveMessage(ctx interface{}, input interface{}, opts ...interface{}) *SQSService_ReceiveMessage_Call {
	return &SQSService_ReceiveMessage_Call{Call: _e.mock.On("ReceiveMessage",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *SQSService_ReceiveMessage_Call) Run(run func(ctx context.Context, input *sqs.ReceiveMessageInput, opts ...func(*sqs.Options))) *SQSService_ReceiveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sqs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sqs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sqs.ReceiveMessageInput), variadicArgs...)
	})
	return _c
}

func (_c *SQSService_ReceiveMessage_Call) Return(_a0 *sqs.ReceiveMessageOutput, _a1 error) *SQSService_ReceiveMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQSService_ReceiveMessage_Call) RunAndReturn(run func(context.Context, *sqs.ReceiveMessageInput, ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error)) *SQSService_ReceiveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewSQSService creates a new instance of SQSService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQSService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQSService {
	mock := &SQSService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
